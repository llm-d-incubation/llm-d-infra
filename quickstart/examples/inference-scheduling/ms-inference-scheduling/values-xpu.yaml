# Simplified Intel XPU configuration using imageDefault mode
# This configuration lets the chart handle most vLLM parameters automatically

modelArtifacts:
  name: deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B
  uri: "hf://deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B"
  size: 10Gi
  authSecretName: "llm-d-hf-token"

accelerator:
  type: "intel"

# Routing configuration - required for inference-scheduling
routing:
  modelName: deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B
  servicePort: 8000
  
  parentRefs:
    - group: gateway.networking.k8s.io
      kind: Gateway
      name: infra-inference-scheduling-inference-gateway

  proxy:
    image: ghcr.io/llm-d/llm-d-routing-sidecar:v0.2.0
    connector: nixlv2
    secure: false
    # Match vLLM port with container port (both 8000)
    vllmPort: 8000
    port: 8000

  inferenceModel:
    create: false

  inferencePool:
    create: false
    name: gaie-inference-scheduling

  httpRoute:
    create: true

  epp:
    create: false

decode:
  create: true
  replicas: 1
  monitoring:
    podmonitor:
      enabled: false
      portName: "metrics"
      path: "/metrics"
      interval: "30s"
  containers:
  - name: "vllm"
    # Use Intel official vLLM image for XPU
    image: "intel/vllm:0.10.0-xpu"

    # Use imageDefault to let chart handle vLLM parameters automatically  
    modelCommand: "imageDefault"
    
    # Override specific parameters to match successful docker run
    modelArgs:
      model: deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B
      dtype: float16
      enforce-eager: true
      port: 8000
      block-size: 64
      gpu-memory-util: 0.9
      disable-prefix-caching: true
      trust-remote-code: true
      disable-sliding-window: true
      disable-log-requests: true
      max-num-batched-tokens: 8192
      max-model-len: 4096

    ports:
      - containerPort: 8000
        protocol: TCP
    
    # Environment variables for proxy configuration and Intel XPU
    env:
      # Network proxy configuration for model downloading
      - name: HTTP_PROXY
        value: "http://proxy-dmz.intel.com:911"
      - name: HTTPS_PROXY
        value: "http://proxy-dmz.intel.com:912"
      - name: http_proxy
        value: "http://proxy-dmz.intel.com:911"
      - name: https_proxy
        value: "http://proxy-dmz.intel.com:912"
      - name: NO_PROXY
        value: "localhost,127.0.0.1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,.local,.intel.com"
      - name: no_proxy
        value: "localhost,127.0.0.1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,.local,.intel.com"
      # Intel XPU configuration - simplified based on successful docker run
      - name: ZE_AFFINITY_MASK
        value: "3"
      # Remove complex vLLM configuration that may cause issues
      - name: VLLM_LOGGING_LEVEL
        value: "INFO"
    
    resources:
      limits:
        memory: 24Gi
        cpu: "8"
        gpu.intel.com/i915: "1"
      requests:
        cpu: "4"
        memory: 12Gi
        gpu.intel.com/i915: "1"

    mountModelVolume: true

    # Simplified security context - matching docker privileged mode
    securityContext:
      privileged: true
      
    # Simplified device mounting to match successful docker run
    extraVolumes:
      - name: dev-dri
        hostPath:
          path: /dev/dri
          type: Directory
      - name: dev-dri-by-path  
        hostPath:
          path: /dev/dri/by-path
          type: Directory

    extraVolumeMounts:
      - name: dev-dri
        mountPath: /dev/dri
      - name: dev-dri-by-path
        mountPath: /dev/dri/by-path

  # XPU-specific node affinity
  acceleratorTypes:
    labelKey: "accelerator"
    labelValues:
      - "intel-xpu"
      - "intel-gpu-max"

# Disable prefill for simple XPU example
prefill:
  create: false

# When true, use LeaderWorkerSet for multi-node XPU setups
multinode: false
